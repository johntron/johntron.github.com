<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Johntron.com]]></title>
  <link href="http://johntron.github.com/atom.xml" rel="self"/>
  <link href="http://johntron.github.com/"/>
  <updated>2013-01-31T08:10:55-06:00</updated>
  <id>http://johntron.github.com/</id>
  <author>
    <name><![CDATA[John Syrinek]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ubuntu 12 boot process explained]]></title>
    <link href="http://johntron.github.com/hacking/ubuntu-12-boot-process-explained/"/>
    <updated>2013-01-06T00:00:00-06:00</updated>
    <id>http://johntron.github.com/hacking/ubuntu-12-boot-process-explained</id>
    <content type="html"><![CDATA[<p>I’ve been trying to convert my existing Ubuntu 12.04 server (running this website) to RAID1 for various reasons. Throughout the process, I’ve learned a ton about the Linux boot process (aka “bootstrapping”), and realized a high-level explanation would really help other developers like myself. What follows is a starting place for anyone trying to recover a Linux system or do something other than a default install – the nitty gritty can be found elsewhere.</p>

<h3><a href="http://www.ibm.com/developerworks/library/l-linuxboot/index.html"><img class="alignnone size-full wp-image-787" alt="Linux boot process" src="http://johntron.com/wp-content/uploads/2013/01/fig1.gif" width="529" height="300" /></a></h3>

<h3>Step 1: hardware to software</h3>

<p>This first step is the part that seems like magic to a lot of people, possibly because it’s something that “just happens” and is very difficult to debug when things go wrong due to a general lack of information. Once power is applied, a motherboard initializes a Basic Input/Output System (BIOS). The BIOS performs some basic tests of the hardware (POST), then looks to the boot device (usually a hard drive) with the highest priority to see what to do next.</p>

<p>Please note, newer hardware uses something called the Unified Extensible Firmware Interface. I will not be covering UEFI, but some crucial information is included below.</p>

<h3>Step 2: BIOS to bootloader</h3>

<p>The BIOS’s ultimate goal is to transfer control to some higher-level system. The BIOS looks at the beginning of devices (highest-priority first) until it finds a <a href="http://en.wikipedia.org/wiki/Master_boot_record" target="_blank">Master Boot Record</a> (MBR) and attempts to launch any bootloader it finds. Unfortunately, for historical reasons the MBR is very small and GRUB doesn’t fit into such a small space. For this reason, GRUB places <a href="http://www.gnu.org/software/grub/manual/grub.html#Images" target="_blank">boot.img</a> in the MBR which simply jumps to  the location on disk immediately after the MBR (called the post-MBR gap) from which the rest of GRUB (<a href="http://www.gnu.org/software/grub/manual/grub.html#Images" target="_blank">core.img</a>) is loaded. At this point we are presented with the GRUB menu.</p>

<h3>Step 3: Bootloader to kernel</h3>

<p>Once GRUB is up and running it decompresses and loads the Linux kernel from the path specified by the <em>linux</em> command – typically /vmlinuz or some variation. The kernel is able to (eventually) get us a <a href="http://en.wikipedia.org/wiki/User_space" target="_blank">user space</a> to do the things we really care about, but we’re not quite done with GRUB.</p>

<p>The Linux kernel is responsible for initializing devices and preparing the system for use by the OS. A kernel that supports every device out there would necessarily be massive. To keep the kernel small and platform agnostic, a pluggable architecture is used. The kernel can load other modules to accomplish its goals. So where are these modules located? In a compressed archive called initramfs! So where is initramfs? Ubuntu 12.10 relies on GRUB to inject initramfs into the kernel (see <a href="http://www.gnu.org/software/grub/manual/html_node/initrd.html" target="_blank">initrd</a>). This approach uses the kernel’s (deprecated) initrd system (see “<a href="https://www.kernel.org/doc/Documentation/filesystems/ramfs-rootfs-initramfs.txt" target="_blank">External initramfs images</a>“). So the /initrd.img is named like an initrd archive, but it’s really a initramfs archive.</p>

<h3>Step 4: kernel to init</h3>

<p>Now that the kernel is up and running and has access to any modules it might need, it sets up core components of the system then transfers control to the first userspace process, <em>/init</em> (located in initramfs). <em>/init</em> is simply a shell script that overwrites the temporary filesystem mounted by the kernel with the root filesystem used by the OS. The last action taken by <em>/init</em> (the shell script) is to launch the init (the daemon). The init daemon is located at <em>/sbin/init</em> on Ubuntu and acts as the direct- or indirect-parent process of all other processes. Ubuntu uses its own version of init referred to as <a href="http://upstart.ubuntu.com/" target="_blank">upstart</a>. In addition to acting as a primordial ancestor, upstart also launches Ubuntu services configured to start at boot, kills services when necessary, and supervises them while they’re running. If you’ve ever used the <em>service</em> command or edited anything under <em>/etc/init.d</em>, you’ve dealt with upstart.</p>

<h3>Failure conditions</h3>

<p><a href="http://www.tuxradar.com/content/how-fix-linux-boot-problems"><img alt="Boot failure conditions" src="http://johntron.com/wp-content/uploads/2013/01/LXF100.tut_bootfail.diagram.png" width="404" height="483" /></a></p>

<h3>BIOS/MBR vs. (U)EFI/GPT</h3>

<p>Manufacturers and OS distributions are currently transitioning from BIOS and MBR’s to UEFI and GPT’s. BIOS and MBR’s were not built with 2TB hard drives in mind – similarly to 32-bit systems with lots of RAM, they simply cannot access (address) these large drives because they simply don’t have the vocabulary. <a href="http://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface" target="_blank">The Unified Extensible Firmware Interface</a> (previously known as simply EFI, but people united and we now call it UEFI) and GUID Partition Table (GPT) format were created to address this limitation (and others).</p>

<p>UEFI is a protocol describing how hardware and software should communicate. This means a (U)EFI motherboard will require a UEFI image (bootlooader) and OS that understands UEFI (Windows does). Older hardware can be made to use UEFI images by essentially bootstrapping UEFI from BIOS (think BIOS -> MBR -> UEFI). Conversely, many UEFI images include legacy support for BIOS (Windows 7 for instance), so they can work on older hardware.</p>

<p>The specification for the GPT format is a subset of the UEFI specification. While GPT and UEFI are closely intertwined, hardware and software created during the BIOS-to-UEFI transitory period often provides legacy support for BIOS and MBR. When building a system, be sure to check if your OS will work with your motherboard. Some BIOS motherboards can be upgraded (by flashing the ROM) to use UEFI, and some include support for both UEFI and BIOS, this is not always the case (and will probably not be the case in the near future). If your motherboard cannot do UEFI, make sure your OS includes legacy support for BIOS. Similarly, even though BIOS was designed to use MBR’s and UEFI was designed for GPT’s, BIOS systems can be configured to use the MBR to bootstrap EFI/GPT – this does not mean that UEFI systems can use GPT to bootstrap BIOS/MBR!</p>

<h3>Does it have to be so confusing? {#confusing}</h3>

<p>I was struck by the complexity of the bootup process was and wondered why it had been designed this way. I understand how transistors work, how they are combined to create a binary system, how binary operations are organized into an instruction set, how an instruction set is used by a compiler to provide high-level programming languages, and how high-level programming languages are used to describe tasks for the hardware to perform. Still, the boot process seemed like a mystical magical thing that ends with a command prompt when things go well and the impression of a keyboard on my forehead when things go wrong.</p>

<p>I think part of the reason it’s so mystical is because there’s so many moving pieces. Transistors, binary, and instruction sets are each pretty simple, so why was the bootup process designed to be so complex? The short answer is it wasn’t (designed). The complexity is the result of shoehorning newer functionality into an old design. I wonder if early systems had something like GRUB and also how hard they to recover from disaster. Anyone that’s ever used LILO will understand how powerful today’s bootloaders and kernels are. While this extra complexity is confusing it provides certain niceties like allowing us to load GRUB modules at runtime so we can access disparate filesystems.</p>

<p>Interestingly, it is possible to compile a very small version of the Linux kernel that will fit in the MBR and act as the bootloader. While this eliminates the need for GRUB altogether, this type of setup will probably not include the disaster recovery that GRUB provides, and a more robust system would probably just use UEFI hardware and a recent version of the Linux kernel.</p>

<p>In the future systems will be even more powerful but also more intuitive. BIOS and MBR are currently deprecated and are being replaced by UEFI and GPT which are much simpler to setup and provide more functionality. In the future boot sectors will not be required at the beginning of disks. While chainloading (using a bootloader to bootstrap another bootloader) will still be possible, it won’t be necessary, so GRUB initialization may become a single-stage process. Even though GRUB now provides UEFI support for newer hardware,  <a href="https://wiki.archlinux.org/index.php/UEFI_Bootloaders#Linux_Kernel_EFISTUB" target="_blank">the Linux kernel has had native UEFI support since version 3.3</a> (Ubuntu 12.10 comes with version 3.5). Someday, GRUB will probably be obsolete; however, it looks like <a href="http://arstechnica.com/information-technology/2012/10/linux-foundation-to-offer-signed-solution-for-uefi-secure-boot-conundrum/" target="_blank">reality it will even more complex thanks to Microsoft</a>.</p>

<h3>Useful links</h3>

<ul>
<li><a href="http://www.ibm.com/developerworks/library/l-linuxboot/index.html" target="_blank">Inside the Linux boot process</a></li>
<li><a href="http://en.wikipedia.org/wiki/Linux_startup_process" target="_blank">Linux startup process</a></li>
<li><a href="http://www.debian.org/doc/manuals/debian-reference/ch03.en.html" target="_blank">The system initialization</a></li>
<li><a href="http://wiki.debian.org/BootProcess" target="_blank">BootProcess</a></li>
<li><a href="http://www.tuxradar.com/content/how-fix-linux-boot-problems" target="_blank">How to fix Linux boot problems</a></li>
<li><a href="http://ubuntuforums.org/showthread.php?t=1599293" target="_blank">HOWTO: Boot &amp; Install Ubuntu from the Grub Rescue Prompt</a></li>
<li><a href="http://askubuntu.com/questions/84501/how-can-i-change-convert-a-ubuntu-mbr-drive-to-a-gpt-and-make-ubuntu-boot-from" target="_blank">How can I change/convert a Ubuntu MBR drive to a GPT, and make Ubuntu boot from EFI?</a></li>
<li><a href="http://www.burnedin.com/article/gpt-vs-mbr-explained" target="_blank">GPT vs MBR – GPT Explained</a></li>
<li><a href="http://www.kernel.org/doc/Documentation/kernel-parameters.txt" target="_blank">Kernel Parameters</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Effective Graph Layout]]></title>
    <link href="http://johntron.github.com/advice/effective-graph-layout/"/>
    <updated>2012-10-20T00:00:00-05:00</updated>
    <id>http://johntron.github.com/advice/effective-graph-layout</id>
    <content type="html"><![CDATA[<p>I found this while writing some D3: <a href="http://seeingcomplexity.wordpress.com/2011/02/05/hierarchical-edge-bundles/" title="Seeing Complexity – Hierarchical Edge Bundles">Seeing Complexity – Hierarchical Edge Bundles</a> – a really great read on the graph drawing problem and various approaches. This is a really great read for anyone trying to figure out the best way to draw a particular graph.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Better logging with Loggly and Symfony 2]]></title>
    <link href="http://johntron.github.com/programming/better-logging-with-loggly-and-symfony-2/"/>
    <updated>2012-07-02T00:00:00-05:00</updated>
    <id>http://johntron.github.com/programming/better-logging-with-loggly-and-symfony-2</id>
    <content type="html"><![CDATA[<p>If you’re using the <a href="https://github.com/beberlei/WhitewashingLogglyBundle" target="_blank">WhitewashingLogglyBundle</a> to send your Symfony 2 project’s log messages to <a href="http://loggly.com/" target="_blank">Loggly</a>, you’re probably wishing the messages on Loggly were a little more informative. Just add this to your services.yml:<br/>
[yaml] monolog.processor.introspection:<br/>
class: Monolog\Processor\IntrospectionProcessor<br/>
tags:<br/>
– { name: monolog.processor }</p>

<p>monolog.processor.web:<br/>
class: Monolog\Processor\WebProcessor<br/>
tags:<br/>
– { name: monolog.processor }[/yaml]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DELL Design Library]]></title>
    <link href="http://johntron.github.com/advice/dell-design-library/"/>
    <updated>2012-06-25T00:00:00-05:00</updated>
    <id>http://johntron.github.com/advice/dell-design-library</id>
    <content type="html"><![CDATA[<p><a href="http://www.delldesignlibrary.com/">DELL’s Design Library</a> is a boon to UI developers – lots of great stuff! I learned about it at this year’s Big Design Conference in a discussion led by Jonathan Atkins, Jim Machajewski, <a href="http://harrisonpad.com/" title="Bill Harrison">Bill Harrison</a>, and Ashley Eaton.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to root a Kindle Fire on OS X]]></title>
    <link href="http://johntron.github.com/mobile/how-to-root-a-kindle-fire-on-os-x/"/>
    <updated>2012-02-20T00:00:00-06:00</updated>
    <id>http://johntron.github.com/mobile/how-to-root-a-kindle-fire-on-os-x</id>
    <content type="html"><![CDATA[<ol>
<li>Download and extract the <a href="http://developer.android.com/sdk/index.html">Android SDK</a></li>
<li>Download <a href="http://forum.xda-developers.com/showthread.php?t=1410223">BurritoRoot3.apk</a></li>
<li>Download and extract <a href="http://wiki.cyanogenmod.com/index.php?title=Latest_Version">Google Apps for Android</a>. Scroll to the bottom of the page and there’s a download link listed next to latest version of CyanogenMod under “Google Apps”</li>
<li>Download <a href="http://munday.ws/2011/12/kindle-fire-market-opener/">Kindle Fire Market Opener</a></li>
<li>Open <em><extracted Android SDK folder>/tools/android</em> by double-clicking or launching with Terminal</li>
<li>Install Android SDK Platform-tools and (not sure if it’s required) Android 2.3.3/SDK Platform</li>
<li>Connect your Kindle to your Mac with USB cable.</li>
<li>In Terminal, run:<br/>
[bash]echo “0×1949″ >> ~/.android/adb_usb.ini # Adds Amazon vendor ID to list of allowed USB devices<br/>
cd <extracted Android SDK folder>/platform-tools<br/>
./adb start-server # Allows us to execute commands on the device<br/>
./adb devices # This should show one device<br/>
./adb shell chmod 777 /data/local/tmp # Need to be able to write to tmp folder<br/>
./adb install <path to BurritoRoot3.apk><br/>
[/bash]</li>
<li>Launch BurritoRoot3 on your Kindle</li>
<li>In Terminal run:<br/>
[bash]<br/>
./adb shell /data/local/tmp/BurritoRoot3.bin –root # Roots device<br/>
./adb shell /data/local/tmp/BurritoRoot3.bin –install # Installs Superuser app<br/>
./adb install <path to Google Apps>/system/app/GoogleServicesFramework.apk # Dependencies<br/>
./adb push <path to GApps>/system/app/Vending.apk /system/app/Vending.apk # Marketplace<br/>
./adb shell chmod 644 /system/app/Vending.apk # Sets permissions correctly<br/>
./adb install <path to Market Opener>/MarketOpener.apk # Puts Marketplace on Carousel

<h1>May need to use <a href="http://www.amazon.com/Xian-Geek-File-Expert/dp/B004VMY62Q/ref=cm_cr_pr_product_top">File Expert</a> to install /system/App/Vending.apk</h1>

<p>[/bash]</p></li>
<li>Restart your Fire, then launch the Marketplace app and follow the instructions</li>
</ol>


<p> </p>

<p style="padding: 1em; background-color: #f2c879; border: 1px solid gray;">
  Is this outdated? Leave me a comment so I know!
</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[k-cluster algorithm in PHP]]></title>
    <link href="http://johntron.github.com/programming/k-cluster-algorithm-in-php/"/>
    <updated>2011-07-11T00:00:00-05:00</updated>
    <id>http://johntron.github.com/programming/k-cluster-algorithm-in-php</id>
    <content type="html"><![CDATA[<p>I couldn’t find any k-cluster algorithms in PHP, so I wrote my own for demonstration purposes. It’s not very efficient, but should<br/>
help learn.</p>

<!--more-->


<p>[php]#!/usr/bin/php<br/>
&lt;?php</p></p>

<p>$DATA_POINT_COUNT = 100;<br/>
$NUM_CLUSTERS = 5;</p>

<p>function pick_centroids($data, $num) {<br/>
$centroids = array();<br/>
for ( $i = 0; $i &lt; $num; $i++) { $centroids[] = mt_rand( 0, count($data) - 1 ); } return $centroids; } function generate_centroids( $centroids ) { // Centroids are just the average value of each centroid foreach( $centroids as $i =&#8211;> $centroid ) {<br/>
$centroids[ $i ] = array_sum( $centroid ) / count( $centroid );<br/>
}<br/>
return $centroids;<br/>
}</p>

<p>function generate_clusters( $data, $centroids ) {<br/>
// iterate through datapoints and associate each datapoint with the closest centroid</p>

<p>$max = max( $data ); // Maximum possible distance<br/>
$clusters = array(); // Output<br/>
foreach( $data as $datum ) {<br/>
$closest_dist = $max;<br/>
$index_of_closest = 0;<br/>
foreach( $centroids as $centroid ) {<br/>
$dist = abs( $centroid – $datum );<br/>
//print ‘dist between ‘ . $datum . ‘ and ‘ . $centroid . ‘ is ‘ . $dist . PHP_EOL;<br/>
if ( $dist &lt; $closest_dist ) {<br/>
// Datapoint was closer to this centroid than the last</p>

<p>$closest_dist = $dist;<br/>
$index_of_closest = $centroid; // Use centroid value as index to avoid duplicates<br/>
}<br/>
}<br/>
//print ‘index of closest is ‘ . $index_of_closest . PHP_EOL;<br/>
if ( !isset( $clusters[$index_of_closest] ) ) $clusters[$index_of_closest] = array(); // Avoid undefined-offset notices<br/>
array_push( $clusters[$index_of_closest], $datum ); // Store datapoint at index of centroid it’s closest to<br/>
}<br/>
return $clusters;<br/>
}</p>

<p>// Generate datapoints<br/>
$data = array();<br/>
for( $i = 0; $i &lt; $DATA_POINT_COUNT; $i++ ) {<br/>
$data[] = mt_rand(0,$i);<br/>
}<br/>
sort( $data ); // Sort to be neat<br/>
print_r( $data );</p>

<p>// Generate initial centroids randomly<br/>
$centroids = pick_centroids( $data, $NUM_CLUSTERS );</p>

<p>// Generate new clusters and compare to old ones until there’s no change<br/>
$old_clusters = 0; // Seed values<br/>
$clusters = !$old_clusters; //<br/>
while( $clusters !== $old_clusters ) {<br/>
// Save old clusters<br/>
$old_clusters = $clusters;</p>

<p>// Generate new ones<br/>
$clusters = generate_clusters( $data, $centroids );</p>

<p>// Create new centroids<br/>
$centroids = generate_centroids( $clusters );<br/>
}</p>

<p>echo ‘Clustering complete’ . PHP_EOL;<br/>
foreach( $clusters as $cluster ) {<br/>
echo ‘cluster: ‘ . implode( ‘, ‘, $cluster ) . PHP_EOL;<br/>
}[/php]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript classes using Object Notation (JSON) with constructor]]></title>
    <link href="http://johntron.github.com/advice/json-with-constructor/"/>
    <updated>2011-05-02T00:00:00-05:00</updated>
    <id>http://johntron.github.com/advice/json-with-constructor</id>
    <content type="html"><![CDATA[<p>If you’re like me, you get really tired of looking at ugly JavaScript. Sure, JavaScript sourcecode can be very clean and concise, but why is there so much ugliness? <a href="http://json.org/">JSON</a> is our saving grace, but only if you know how to wield it.</p>

<p>If you want a history lesson on JSON,<br/>
[javascript]var animal = function( species ) {<br/>
return {<br/>
species: null,<br/>
init: function( species ) {<br/>
this.species = species<br/>
return this<br/>
},<br/>
toString: function() {<br/>
return ‘This is a ‘ + this.species<br/>
}<br/>
}.init( species )<br/>
}<br/>
var cat = new animal( ‘cat’ )<br/>
var dog = new animal( ‘dog’ )<br/>
document.write( cat.toString() )<br/>
document.write( dog.toString() )[/javascript]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Evaluating Third-party Software]]></title>
    <link href="http://johntron.github.com/programming/evaluating-third-party-software/"/>
    <updated>2010-11-08T00:00:00-06:00</updated>
    <id>http://johntron.github.com/programming/evaluating-third-party-software</id>
    <content type="html"><![CDATA[<!--:en-->


<p>I recently ran across a great overview of the strengths of Django:</p>

<p><a title="The Rise of Python and Django on the Web" href="http://jltfox.posterous.com/the-rise-of-python-and-django-on-the-web" target="_blank">The Rise of Python and Django on the Web</a>. Great job jltfox!</p>

<p>When evaluating any third-party software, here are the criteria I use:</p>

<ul>
<li>Documentation – If a framework wants to be the core of my code, I have to be able to understand every aspect</li>
<li>Simplicity – Documentation can only go so far. The framework has to be simple so it’s intuitive. I don’t want to have to refer to documentation for everything. Also, integrating my own code or third-party code has to be effortless, and simplicity makes this more likely</li>
<li>Clarity – This is related to simplicity and documentation. A good framework has pick programming methodology, communicate this, and stick to it. Function definitions and naming conventions should be consistent.</li>
<li>Modularity – A framework is rarely and end-all solution. I have never worked on a project with a framework and no other third-party software. A good framework plays well with others.</li>
<li>Community – Frameworks come and go, so a good community is key. I want to know support and development will continue for years to come. Also, I don’t want to have to pay someone just because they know something no one else does.</li>
<li>Openness – Nobody can predict how people will use their software, so it’s crucial for developers to be able to dig around in the code of a framework. This means open source, simplicity, and great documentation from the top down.</li>
</ul>


<p>With these criteria in mind, here’s my opinions on various software:</p>

<ul>
<li>Django does a great job at all of these.</li>
<li>Zend Framework is pretty good as well.</li>
<li>jQuery is a great Javascript framework.</li>
<li>Yahoo’s YUI used to try to do too much, but this may have improved.</li>
<li>WordPress is pretty good, but their documentation could be organized better.</li>
<li>Drupal is all over the place, but I’m optimistic about the upcoming version 7.</li>
<li>Ubuntu is a top notch linux distribution that benefits from a massive community.</li>
<li>FreeBSD is very secure and performs very well, but their package management system and documentation could use some improvement.</li>
</ul>


<p>Over the years, I’ve notice that the predominant players have a few years of buildup before reaching critical mass. Once they reach this point, everyone jumps onboard, and this support helps round out the project – performance improvements, scalability, modularity, documentation, etc. I feel like Zend Framework, WordPress, Ubuntu, and jQuery have reached these points already, while the others are still on track. Some, like YUI and FreeBSD seem to be falling behind. HTML5 and CSS3 could change things for jQuery.<!--:--></p>

<!--:es-->


<p>I recently ran across a great overview of the strengths of Django:</p>

<p><a title="The Rise of Python and Django on the Web" href="http://jltfox.posterous.com/the-rise-of-python-and-django-on-the-web" target="_blank">The Rise of Python and Django on the Web</a>. Great job jltfox!</p>

<p>When evaluating any third-party software, here are the criteria I use:</p>

<ul>
<li>Documentation – If a framework wants to be the core of my code, I have to be able to understand every aspect</li>
<li>Simplicity – Documentation can only go so far. The framework has to be simple so it’s intuitive. I don’t want to have to refer to documentation for everything. Also, integrating my own code or third-party code has to be effortless, and simplicity makes this more likely</li>
<li>Clarity – This is related to simplicity and documentation. A good framework has pick programming methodology, communicate this, and stick to it. Function definitions and naming conventions should be consistent.</li>
<li>Modularity – A framework is rarely and end-all solution. I have never worked on a project with a framework and no other third-party software. A good framework plays well with others.</li>
<li>Community – Frameworks come and go, so a good community is key. I want to know support and development will continue for years to come. Also, I don’t want to have to pay someone just because they know something no one else does.</li>
<li>Openness – Nobody can predict how people will use their software, so it’s crucial for developers to be able to dig around in the code of a framework. This means open source, simplicity, and great documentation from the top down.</li>
</ul>


<p>With these criteria in mind, here’s my opinions on various software:</p>

<ul>
<li>Django does a great job at all of these.</li>
<li>Zend Framework is pretty good as well.</li>
<li>jQuery is a great Javascript framework.</li>
<li>Yahoo’s YUI used to try to do too much, but this may have improved.</li>
<li>WordPress is pretty good, but their documentation could be organized better.</li>
<li>Drupal is all over the place, but I’m optimistic about the upcoming version 7.</li>
<li>Ubuntu is a top notch linux distribution that benefits from a massive community.</li>
<li>FreeBSD is very secure and performs very well, but their package management system and documentation could use some improvement.</li>
</ul>


<p>Over the years, I’ve notice that the predominant players have a few years of buildup before reaching critical mass. Once they reach this point, everyone jumps onboard, and this support helps round out the project – performance improvements, scalability, modularity, documentation, etc. I feel like Zend Framework, WordPress, Ubuntu, and jQuery have reached these points already, while the others are still on track. Some, like YUI and FreeBSD seem to be falling behind. HTML5 and CSS3 could change things for jQuery.<!--:--></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Cathedral, Bazaar, Mythical Man, and Bees]]></title>
    <link href="http://johntron.github.com/communication/the-cathedral-bazaar-mythical-man-and-bees/"/>
    <updated>2010-10-28T00:00:00-05:00</updated>
    <id>http://johntron.github.com/communication/the-cathedral-bazaar-mythical-man-and-bees</id>
    <content type="html"><![CDATA[<!--:en-->


<p><a href="http://johntron.com/wp-content/uploads/2010/10/The-Cathedral-Bazaar-Mythical-Man-and-Bees.png"><img class="size-full wp-image-620 alignright" title="The Cathedral, Bazaar, Mythical-Man, and Bees" src="http://johntron.com/wp-content/uploads/2010/10/The-Cathedral-Bazaar-Mythical-Man-and-Bees.png" alt="The Cathedral, Bazaar, Mythical-Man, and Bees" width="200" height="150" /></a>In a previous post, I talked about the elusive <a title="Johntron is an expert web developer" href="http://johntron.com/advice/the-elusive-expert-web-developer/" target="_self">expert web developer</a> and his role in a software development team. In this post I want to focus more on the larger problem of collaboration. Fred Brooks laid the foundation for this topic in <a style="font-style: italic;" title="Mythical Man Month" href="http://www.amazon.com/Mythical-Man-Month-Software-Engineering-Anniversary/dp/0201835959" target="_blank">Mythical Man Month: Essays on Software Engineering</a>, and Eric S. Raymond (ESR) provided one of the most controversial criticisms 22 years later in his “<a title="The Cathedral and the Bazaar" href="http://www.catb.org/~esr/writings/cathedral-bazaar/cathedral-bazaar/" target="_blank">The Cathedral and the Bazaar</a>“. Since then, there has been much debate over this topic. Let’s start by understanding the problem, and then try to figure out what makes up a successful large-scale project.</p>

<p>If you don’t feel like reading the whole thing, here’s the synopsis:</p>

<ul>
<li>Production in a team is not directly related to the number of people in the team, this is a fallacy known as the Mythical Man-Month</li>
<li>This is because no one can understand every aspect of a large scale project, and communication is exponential in nature</li>
<li>Fred Brooks thinks successful projects operate like a surgical team, with one person at the center surrounded by a large staff (The Cathedral)</li>
<li>Eric Raymond points out the existence of the Linux project – an open-source, highly-distributed, large-scale operation (The Bazaar)</li>
<li>He says this can exist because of the sheer number of people testing, finding bugs, and submitting fixes</li>
<li>Linux still has a surgeon: Linus Torvalds. All changes must go through him.</li>
<li>The project survives because of all the work offloaded from Linus combined with the immediate and deep feedback from the group.</li>
<li>I think a better analogy is bees. A queen bee is the life force of a hive, and the hive supports her. The relationship is singular, plural, and mutual.</li>
<li>I offer a way out for large scale projects that have lost their leader.</li>
</ul>


<p>Read on if you’re still interested.</p>

<h2>The Problem: Brooks Law</h2>

<p>Group dynamics are responsible for the success or failure of any large scale software project. If a project cannot organize in a sustainable way, its failure is simply a matter of time. Long ago, people thought software development was like manufacturing. Many believe productivity is based on how many workers you have. Using this logic, larger projects require more people, and the best way to expedite a project is to simply add more workers, right? Wrong. According to Brooks, “adding manpower to a late software project makes it later”. This is known as Brooks Law. (I like the alternative form: “Nine women can’t make a baby in one month”). While Brooks himself admits this is a simplification, it helps us to understand the issue. Project management is a problem of communication.</p>

<p>Adding new members to a team requires more communication, and communication takes time. Communication is also exponential. Adding one new member to a team of three people means that three people each communicating with two others (six connections) becomes four people communicating with three others (12 connections). A team of 100 members means 9,900 connections. Can you imagine trying to get work done when you have 99 people all trying to tell you something, and each one of those has the same problem? OK, granted this is an oversimplification, but it is based around historical logic.</p>

<p>The other issue with large scale projects is they are broad in scope by definition. This means it is difficult for any one person to understand how every detail of the entire project functions, so team members tend to curate specific portions of the project. Adding one member to a one-man team means he has to get a knowledge dump from him (this is notoriously time consuming and rarely effective), but adding another member to the team means this new member has to get his knowledge from two sources. Again, communication shows it’s exponential nature.</p>

<h2>The Surgical Team and the Gorilla</h2>

<p>Now that we understand the problem, let’s look at Brooks solution – the surgical team. Brooks believes large scale projects work best when organized like a surgical team. You have one very highly skilled person (or at least a very small group of people) at the center, with a staff of assistants there to do his bidding. The surgeon is responsible for getting things done, but his work load is offloaded by his team of supporters. He is the one getting things done, while everyone else gets him the tools he needs, provides input, makes sure he doesn’t screw up, and cleans up after him. In software development, this means the expert developer is the only one modifying the code, while his team gives him patches, points out bugs or problems with his logic, runs tests, and writes documentation.</p>

<p>I really like Brooks idea, mainly for egotistical reasons, but there’s an 800-pound gorilla in the room. If Brooks ideas are correct, how can Linux, or any large-scale open source project exist? This is where Eric Raymond helps out. He believes that these projects are successful because of their openness and the simple fact that there are so many people watching. Raymond would call Brooks idea of the surgical team analogous to the monolithic nature of cathedrals – one point controlling a broad empire. Linux on the other hand is believed to operate like something more similar to a bazaar – many forces working independently. When people work independently on one project, problems are discovered more quickly. Linus’s Law: “given enough eyeballs, all bugs are shallow”. This means bugfixes and new features are created by smaller groups of individuals and then assimilated into the shared codebase. Raymond’s argument played a key role in AOL releasing the code for their browser, Netscape, to the public as well as the open-sourcing of other key components of today’s Linux operating system.</p>

<h2>Linux’s Has a Surgeon, But He’s Kind of Lazy</h2>

<p>With two differing opinions, who is right? I think they both are. While we would like to believe the power of collective intelligence as depicted by Raymond, in reality, large scale open source projects aren’t so distributed. While they are indeed a collaborative effort among tens, hundreds, or even thousands of people, there are still gatekeepers. Linus Torvalds, father of the Linux operating system is perhaps the biggest example of this. Linus is the only person that can make changes to the “official” set of code. Everything goes through him; however, this doesn’t mean he’s living in some dark corner writing code all day every day. In fact, he writes very little code. Instead, he reviews patches that have been handed to him after getting through the screening process of many different developers.</p>

<p>A patch created by some anonymous contributor can get picked up, evaluated, passed on towards Linus, possibly revised, and eventually either ending up at Linus or abandoned. Then, Linus evaluates the patch using his high-level understanding of the entire project, applies it, and distributes his changes to everyone. Everyone then incorporates these changes and tests them. Because so many people are viewing the project, even the deepest bugs are discovered almost immediately. Bugfixes are then submitted through the same process. The community that supports the project also offers the other key role of creating a feedback loop. This kind of group dynamics and organization is seen in many other projects. Most of them have more than one core developer; however, there is typically a very small group of people working in concert with a broad community of contributors and testers. This is similar to Brook’s argument, but the feedback is important. If we modified his idea of the surgical team, it would be as though the staff supporting the surgeon each have their own patient receiving the same treatment, but if any one of them notices a problem, they can notify the surgeon and appropriate actions will be taken.</p>

<h2>Meritocracy and The Cuddle Death</h2>

<p>If you’ve made it this far, you must be really interested in this topic. I’d like to offer a new analogy: bees. A hive of bees operate in the same way as the Linux project. A single queen bee plays the key role of maintaing the rest of the group, while the rest of the group provides everything she needs to keep having little baby bees. These baby bees evolve into grown-ass bees and in turn contribute to the hive. OK, so it’s not a perfect analogy, but neither is the bazaar, the cathedral, or the surgical team. With this analogy, we can also see how a project might survive if the “queen” dies or in some way quits fulfilling the wishes of the hive. When a queen dies, the worker bees have typically already begun incubating new queen bees to replace her. Workers feed these soon-to-be queens a strict diet of royal jelly. This substance allows normal bees to develop into queens (ie: magic). The first new queen to hatch then goes and kills the other queens, and sometimes the old queen bee before taking her throne. If the old queen is still alive, and the new queen doesn’t kill her, the hive kills the old queen in something with a cute name called “cuddle death” (the workers press against her from all sides until she overheats and dies).</p>

<p>The same thing can happen in open source projects. If the community doesn’t like what the core developers are doing, they can either start their own projects and operate separately from the original (something known as swarming in bee-ology), or they can replace the core team with one that meets their needs. Thanks for reading. If you made it this far, you should <a title="Contact Johntron" href="http://johntron.github.com/contact/" target="_self">contact me</a> so we can talk about things.<!--:--></p>

<!--:es-->


<p><a href="http://johntron.com/wp-content/uploads/2010/10/The-Cathedral-Bazaar-Mythical-Man-and-Bees.png"><img class="size-full wp-image-620 alignright" title="The Cathedral, Bazaar, Mythical-Man, and Bees" src="http://johntron.com/wp-content/uploads/2010/10/The-Cathedral-Bazaar-Mythical-Man-and-Bees.png" alt="The Cathedral, Bazaar, Mythical-Man, and Bees" width="200" height="150" /></a>In a previous post, I talked about the elusive <a title="Johntron is an expert web developer" href="http://johntron.com/advice/the-elusive-expert-web-developer/" target="_self">expert web developer</a> and his role in a software development team. In this post I want to focus more on the larger problem of collaboration. Fred Brooks laid the foundation for this topic in <a style="font-style: italic;" title="Mythical Man Month" href="http://www.amazon.com/Mythical-Man-Month-Software-Engineering-Anniversary/dp/0201835959" target="_blank">Mythical Man Month: Essays on Software Engineering</a>, and Eric S. Raymond (ESR) provided one of the most controversial criticisms 22 years later in his “<a title="The Cathedral and the Bazaar" href="http://www.catb.org/~esr/writings/cathedral-bazaar/cathedral-bazaar/" target="_blank">The Cathedral and the Bazaar</a>“. Since then, there has been much debate over this topic. Let’s start by understanding the problem, and then try to figure out what makes up a successful large-scale project.</p>

<p>If you don’t feel like reading the whole thing, here’s the synopsis:</p>

<ul>
<li>Production in a team is not directly related to the number of people in the team, this is a fallacy known as the Mythical Man-Month</li>
<li>This is because no one can understand every aspect of a large scale project, and communication is exponential in nature</li>
<li>Fred Brooks thinks successful projects operate like a surgical team, with one person at the center surrounded by a large staff (The Cathedral)</li>
<li>Eric Raymond points out the existence of the Linux project – an open-source, highly-distributed, large-scale operation (The Bazaar)</li>
<li>He says this can exist because of the sheer number of people testing, finding bugs, and submitting fixes</li>
<li>Linux still has a surgeon: Linus Torvalds. All changes must go through him.</li>
<li>The project survives because of all the work offloaded from Linus combined with the immediate and deep feedback from the group.</li>
<li>I think a better analogy is bees. A queen bee is the life force of a hive, and the hive supports her. The relationship is singular, plural, and mutual.</li>
<li>I offer a way out for large scale projects that have lost their leader.</li>
</ul>


<p>Read on if you’re still interested.</p>

<h2>The Problem: Brooks Law</h2>

<p>Group dynamics are responsible for the success or failure of any large scale software project. If a project cannot organize in a sustainable way, its failure is simply a matter of time. Long ago, people thought software development was like manufacturing. Many believe productivity is based on how many workers you have. Using this logic, larger projects require more people, and the best way to expedite a project is to simply add more workers, right? Wrong. According to Brooks, “adding manpower to a late software project makes it later”. This is known as Brooks Law. (I like the alternative form: “Nine women can’t make a baby in one month”). While Brooks himself admits this is a simplification, it helps us to understand the issue. Project management is a problem of communication.</p>

<p>Adding new members to a team requires more communication, and communication takes time. Communication is also exponential. Adding one new member to a team of three people means that three people each communicating with two others (six connections) becomes four people communicating with three others (12 connections). A team of 100 members means 9,900 connections. Can you imagine trying to get work done when you have 99 people all trying to tell you something, and each one of those has the same problem? OK, granted this is an oversimplification, but it is based around historical logic.</p>

<p>The other issue with large scale projects is they are broad in scope by definition. This means it is difficult for any one person to understand how every detail of the entire project functions, so team members tend to curate specific portions of the project. Adding one member to a one-man team means he has to get a knowledge dump from him (this is notoriously time consuming and rarely effective), but adding another member to the team means this new member has to get his knowledge from two sources. Again, communication shows it’s exponential nature.</p>

<h2>The Surgical Team and the Gorilla</h2>

<p>Now that we understand the problem, let’s look at Brooks solution – the surgical team. Brooks believes large scale projects work best when organized like a surgical team. You have one very highly skilled person (or at least a very small group of people) at the center, with a staff of assistants there to do his bidding. The surgeon is responsible for getting things done, but his work load is offloaded by his team of supporters. He is the one getting things done, while everyone else gets him the tools he needs, provides input, makes sure he doesn’t screw up, and cleans up after him. In software development, this means the expert developer is the only one modifying the code, while his team gives him patches, points out bugs or problems with his logic, runs tests, and writes documentation.</p>

<p>I really like Brooks idea, mainly for egotistical reasons, but there’s an 800-pound gorilla in the room. If Brooks ideas are correct, how can Linux, or any large-scale open source project exist? This is where Eric Raymond helps out. He believes that these projects are successful because of their openness and the simple fact that there are so many people watching. Raymond would call Brooks idea of the surgical team analogous to the monolithic nature of cathedrals – one point controlling a broad empire. Linux on the other hand is believed to operate like something more similar to a bazaar – many forces working independently. When people work independently on one project, problems are discovered more quickly. Linus’s Law: “given enough eyeballs, all bugs are shallow”. This means bugfixes and new features are created by smaller groups of individuals and then assimilated into the shared codebase. Raymond’s argument played a key role in AOL releasing the code for their browser, Netscape, to the public as well as the open-sourcing of other key components of today’s Linux operating system.</p>

<h2>Linux’s Has a Surgeon, But He’s Kind of Lazy</h2>

<p>With two differing opinions, who is right? I think they both are. While we would like to believe the power of collective intelligence as depicted by Raymond, in reality, large scale open source projects aren’t so distributed. While they are indeed a collaborative effort among tens, hundreds, or even thousands of people, there are still gatekeepers. Linus Torvalds, father of the Linux operating system is perhaps the biggest example of this. Linus is the only person that can make changes to the “official” set of code. Everything goes through him; however, this doesn’t mean he’s living in some dark corner writing code all day every day. In fact, he writes very little code. Instead, he reviews patches that have been handed to him after getting through the screening process of many different developers.</p>

<p>A patch created by some anonymous contributor can get picked up, evaluated, passed on towards Linus, possibly revised, and eventually either ending up at Linus or abandoned. Then, Linus evaluates the patch using his high-level understanding of the entire project, applies it, and distributes his changes to everyone. Everyone then incorporates these changes and tests them. Because so many people are viewing the project, even the deepest bugs are discovered almost immediately. Bugfixes are then submitted through the same process. The community that supports the project also offers the other key role of creating a feedback loop. This kind of group dynamics and organization is seen in many other projects. Most of them have more than one core developer; however, there is typically a very small group of people working in concert with a broad community of contributors and testers. This is similar to Brook’s argument, but the feedback is important. If we modified his idea of the surgical team, it would be as though the staff supporting the surgeon each have their own patient receiving the same treatment, but if any one of them notices a problem, they can notify the surgeon and appropriate actions will be taken.</p>

<h2>Meritocracy and The Cuddle Death</h2>

<p>If you’ve made it this far, you must be really interested in this topic. I’d like to offer a new analogy: bees. A hive of bees operate in the same way as the Linux project. A single queen bee plays the key role of maintaing the rest of the group, while the rest of the group provides everything she needs to keep having little baby bees. These baby bees evolve into grown-ass bees and in turn contribute to the hive. OK, so it’s not a perfect analogy, but neither is the bazaar, the cathedral, or the surgical team. With this analogy, we can also see how a project might survive if the “queen” dies or in some way quits fulfilling the wishes of the hive. When a queen dies, the worker bees have typically already begun incubating new queen bees to replace her. Workers feed these soon-to-be queens a strict diet of royal jelly. This substance allows normal bees to develop into queens (ie: magic). The first new queen to hatch then goes and kills the other queens, and sometimes the old queen bee before taking her throne. If the old queen is still alive, and the new queen doesn’t kill her, the hive kills the old queen in something with a cute name called “cuddle death” (the workers press against her from all sides until she overheats and dies).</p>

<p>The same thing can happen in open source projects. If the community doesn’t like what the core developers are doing, they can either start their own projects and operate separately from the original (something known as swarming in bee-ology), or they can replace the core team with one that meets their needs. Thanks for reading. If you made it this far, you should <a title="Contact Johntron" href="http://johntron.github.com/contact/" target="_self">contact me</a> so we can talk about things.<!--:--></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing users on OS X 10.5+]]></title>
    <link href="http://johntron.github.com/advice/managing-users-on-os-x-10-5/"/>
    <updated>2010-10-28T00:00:00-05:00</updated>
    <id>http://johntron.github.com/advice/managing-users-on-os-x-10-5</id>
    <content type="html"><![CDATA[<p>From time to time, I have to add a new user to an OS X server. This can be done from the desktop using the Accounts preference pane under System Preferences; however, many times I do not have access to the desktop (through VNC), so I am forced to use SSH. OS X is very different from linux distributions that use commands like <code>pw</code>, <code>useradd</code>, or <code>adduser</code>.</p>

<p>Here’s a great article explaining how to do this in OS X 10.5 and higher: <a href="http://osxdaily.com/2007/10/29/how-to-add-a-user-from-the-os-x-command-line-works-with-leopard/" target="_blank">How to: Add a user from the OS X command line, works with Leopard!</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Elusive Expert Web Developer]]></title>
    <link href="http://johntron.github.com/advice/the-elusive-expert-web-developer/"/>
    <updated>2010-10-26T00:00:00-05:00</updated>
    <id>http://johntron.github.com/advice/the-elusive-expert-web-developer</id>
    <content type="html"><![CDATA[<p>Expert web developers are hard to find and hard to keep. They operate in an industry in constant flux, survive by constantly reinventing themselves, and thrive on their ability to generalize insight gained through deep understanding and experience. To them, writing code is no longer about solving a problem so much as doing it in a particular way.</p>

<blockquote><p>To the savvy web developer, time constraints, complexity, and technological requirements are no threat – simply another piece of a larger perspective. Software development is not a question of “how”, but rather a question of “in what manner”.</p></blockquote>

<p>The thing that sets expert web developers apart from the crowd – it’s <a title="Tons of crappy freelancers" href="http://www.freelancer.com/" target="_blank">definitely a crowd</a> – is their breadth and depth of knowledge. They understand software down to individual bits and bytes, but they also work well with the human aspects of software like design and usability, teamwork, and business decisions. A single expert can do the work of multiple developers in less time.</p>

<p>With all of this being said, how can you recognize <a title="Johntron! :D" href="http://johntron.com/" target="_self">an expert web developer</a> and work with them to get things done? The first part is easy. If you’ve worked with one, you would have noticed. Just look over their shoulder for a few minutes, and you’ll see windows flicker, hear keys on their keyboard popping like bubble wrap under a steamroller, and smell the burning from their computer’s fan as it struggles just to keep up. Their productivity is magnitudes higher than other developers. They can work by themselves, communicate progress, and adapt to input from coworkers or clients. Some may demand higher pay, but many are just looking for something fun to work on.</p>

<p>There’s also another way to recognize the champions. Because of their abilities, they constantly seek challenges and new frontiers. Unfortunately, many people realize a great web developer after they have left to pursue more interesting work. They leave for many reasons such as too much busy work, lack of freedom, or too many rules and procedures. <em>If they exist in an environment devoid of challenges and inspiration, there is nothing you can do to turn them around</em>. For this reason, it is important to provide challenges and listen carefully.</p>

<p>When you’re working with an expert web developer, getting things done is a matter of accommodating the developer. Frederick Brooks does a great job of explaining what this looks like in his iconic book <em><a title="The Mythical Man Month" href="http://www.amazon.com/Mythical-Man-Month-Software-Engineering-Anniversary/dp/0201835959/ref=sr_1_1?ie=UTF8&qid=1288154678&sr=8-1" target="_blank">The Mythical Man Month</a></em>. Individuals should operate like members of a surgical team. The expert developer is the surgeon, and members of the design team, copywriters, business analysts, and others surround him ready to provide him with what he needs at any given moment. They take his work and round it out with design assets, documentation, customer service, feedback, and suggestions.</p>

<p>Providing support is important when working with an expert developer, but it’s more important to satiate their craving for new challenges. When they work on the same thing day in and day out, you may notice their productivity slipping, and their general demeanor becoming more complacent. If this happens, you need to act quickly to engage them. One way is by giving them some time to themselves. Let them work on their own ideas. I think you’ll find that the time you’ve given up to them is made up for by increases in productivity. When they have a project they’re interested in, it inspires them, and this inspiration carries over into all of their actions.</p>

<p>Many times expert web developers are simply content with a change of scenery. This may mean moving them to a new project, encourage them to incorporate <a title="new technologies" href="http://github.com/repositories" target="_blank">new technologies</a>, or even just moving the furniture around (literally). Ask them for a prototype of an idea you or your team came up with but never focused on. Buy that latest <a title="Gee-wiz software" href="http://www.panic.com/coda/" target="_blank">gee-wiz software</a> that lets them build widgets in a new way. Buy a couch. Give them gift cards to coffee shops and tell them to work from there. Send them to a <a title="Google I/O" href="http://code.google.com/events/io/" target="_blank">tech conference</a>. Sometimes they might need a breather, so give them a day or two of paid time off.</p>

<p>One of the biggest misconceptions when working with developers is that getting things done is a matter of management – setting deadlines, monitoring progress, adding new team members, having more meetings, etc. While this may be true for novice-level developers, it is just the opposite for the <a title="Joel Spolsky" href="http://www.joelonsoftware.com/" target="_blank">hero developers</a>. Their success relies on inspiration, challenges, and mobility. I’ve known a lot of developers personally as well as professionally. A lot of them approach it as job or even a hobby, but the great ones stand out because their approach to software is holistic. Their demeanor is enthusiastic, their hobbies are unique, their style reflects their expert status, and the decisions they make are centered around software. There is no stopping them.</p>

<p style="text-align: center;">
  <img class="aligncenter size-full wp-image-602" title="Expert web developers type like steam rollers over bubblewrap" src="http://johntron.com/wp-content/uploads/2010/10/bubble-wrap.png" alt="Expert web developers type like steam rollers over bubblewrap" width="580" height="488" />
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSH-FTP &#038; Subversion without shell access]]></title>
    <link href="http://johntron.github.com/advice/sftp-svn-without-login/"/>
    <updated>2010-10-18T00:00:00-05:00</updated>
    <id>http://johntron.github.com/advice/sftp-svn-without-login</id>
    <content type="html"><![CDATA[<p><em>Granting shell access to third-parties can be a security nightmare if done improperly. Even with the best intentions, clients can accidentally delete mission-critical files or shut down crucial services, and clients are the least of your concerns. Servers across the world are constantly attacked by zombie computers. One of the more common forms of attacks are brute force attempts at obtaining shell access through SSH. Servers with plaintext passwords are the first to fall victim to viri, worms, or other nasty intrusions. Here’s how to provide access the correct way.</em></p>

<p>This method provides file transfer access through the SSH File Transfer Protocol (SFTP – this is different from FTP plus SSL). In addition, it allows third-parties to checkout from (and commit changes to) a Subversion repository. This method does NOT allow SSH shell access, because you should assume granting this kind of privileged access to an unexperienced user is a security risk – at least without further configuration.</p>

<p><strong>Steps to enable SFTP and Subversion access for a user account:</strong></p>

<ol>
<li>Generate a private-/public-key combination using <code>ssh-keygen</code></li>
<li>Copy public-key to server</li>
<li>Disable password-based authentication (recommended but not required)</li>
<li>Lock the user account</li>
<li>Force the <code>svnserve</code> tunneling daemon to run upon login</li>
<li>Connect to server with SFTP and Subversion</li>
</ol>


<h3>Steps 1 and 2: Generate keys and copy public key to server</h3>

<p>Begin by setting up private-/public- shared SSH authentication keys. There are plenty of tutorials on how to do this, so refer to one of these: <a href="http://oreilly.com/pub/h/66" target="_blank">Quick Logins with ssh Client Keys</a>.</p>

<h3>Step 3: Disable password-based authentication</h3>

<p>This step is not required, but you’ve already bothered with setting up authentication keys. Why not? Passwords will never be sent over the wire. On the upside, keys also make connecting to a server faster (no passwords to type!). To do this, simply edit <code>sshd_config</code> (usually under <code>/etc/ssh/sshd_config</code>), change <code>PasswordAuthentication</code> to <code>no</code>, then restart <code>sshd</code> – make sure you can connect with your new keys first!</p>

<h3>Steps 4 and 5: Lock the user account and force <code>svnserve -t</code></h3>

<p>Next, lock the user account and force the svnserve tunneling daemon to run upon login like so: <a href="http://blog.bigsmoke.us/2008/08/04/disabling-ssh-shell-access-for-svn-users-on-a-linuxunix-system" target="_blank">Disabling SSH shell access for SVN users on a Linux/Unix system</a></p>

<h3>Step 6: Connect to server with SFTP and Subversion</h3>

<p>You should now be able to use SFTP to transfer files to and from the server. You must provide a username, but no password will be required (your key will be used instead). For Subversion, repository paths should use the <code>svn+ssh://</code> scheme with a username like so: <code>svn co svn+ssh://myusername@somedomain.com/path/to/repo</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python site-packages]]></title>
    <link href="http://johntron.github.com/programming/python-site-packages/"/>
    <updated>2010-07-18T00:00:00-05:00</updated>
    <id>http://johntron.github.com/programming/python-site-packages</id>
    <content type="html"><![CDATA[<p>To get the path of your Python site-packages, just type the following from the console:</p>

<p>[bash]python -c “from distutils.sysconfig import get_python_lib; print get_python_lib()”[/bash]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Measurability and Metrics are King]]></title>
    <link href="http://johntron.github.com/communication/measurability-and-metrics-are-king/"/>
    <updated>2010-06-01T00:00:00-05:00</updated>
    <id>http://johntron.github.com/communication/measurability-and-metrics-are-king</id>
    <content type="html"><![CDATA[<p>Lately I’ve been thinking about success and how it is achieved. I feel that a large part of success is simply being able to produce reasonably accurate statistics that prove your success. 1 million members, 10,000 clicks a day, $1 million in revenue, etc.</p>

<p>I got the idea while I was at the <a href="http://bigdesignconference.com/">Big Design Conference</a> in Dallas, TX. I saw <a href="http://www.poetpainter.com/">Stephen Anderson</a>‘s talk about turning everyday activities into games, and then went to <a href="http://answerlab.com/about/leadership.php/">Amy Buckner</a>‘s talk about web analytics. Competition is like a race to see who can get the most of something. This something can be users, traffic, money, or something else; however, without a number, this information is meaningless.</p>

<p>In our culture, numbers have some serious gusto. They are the deciding factor in everything we do. Do you eat the food that’s cheaper, or the one with less calories? Do we buy the car that gets better MPG or has more horsepower? Do we invest in the company with a better P/E ratio or a larger market share?</p>

<p>Because of this bias, competition between businesses can easily be influenced by metrics. We often hear “Wonkybutz just passed X million users” or “Net profits for Tequilavision just exceeded $1 million”. When these headlines hit the media channels, popular opinion is greatly effected. We read these short phrases with a number in them and subconsciously think, “Well, I guess that means they’re king of the hill now”. The first company to publish a metric with any clout is often deemed reigning champion, or at least an early leader.</p>

<p>Recently, this happened last Wednesday with Apple and Microsoft when <a href="http://www.nytimes.com/2010/05/27/technology/27apple.html">Apple’s market capitalization exceeded the Redmond folks for the fist time</a>. This news spread like wildfire. People started speculating. Are people going to take Microsoft more seriously now that they’re the underdog? <a href="http://twitter.com/Johntron/statuses/14919022901">I was guilty of this myself</a>.</p>

<p>Unfortunately, metrics are widely misunderstood. It is easy for a company to publish inflated or misleading metrics, and this has powerful implications on popular opinion. Most people don’t understand market capitalization as a metric, and those that do are still effected by its social impact. Capitalization is based on speculation. The total value of Apple’s public shares, in USD, is now greater than Microsofts. It is a stretch to say Apple is now more powerful than Microsoft, because market capitalization is NOT a measure of power or influence. <a href="http://blogs.computerworld.com/16214/is_apple_really_more_valuable_than_microsoft">Sharon Machlis</a> does a good job at pointing out the facts.</p>

<p>So much of our lives is based on numbers. Science is driven ever further towards a better future because of measurability. The tides of our economy rise and fall in unison with popular metrics. Online culture is at the mercy of analytics. When we’re surrounded by numbers on a daily basis, it’s easy to get lost in them. We must constantly remind ourselves: “This is just a number. What does it really mean?”.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multiple Databases in Django 1.2]]></title>
    <link href="http://johntron.github.com/programming/multiple-databases-in-django/"/>
    <updated>2009-12-16T00:00:00-06:00</updated>
    <id>http://johntron.github.com/programming/multiple-databases-in-django</id>
    <content type="html"><![CDATA[<p><img class="size-full wp-image-478 alignright" title="Multi-database Django" src="http://www.johntron.com/wp-content/uploads/2009/12/multi-db-django.png" alt="Multi-database Django" width="144" height="80" /></p>

<p>Django 1.2 will contain support for multiple databases, according to <a href="http://simonwillison.net/static/2009/djugl-december.html">Simon Willison</a> (<a href="http://twitter.com/simonw/">@simonw</a>). Good news for people trying to scale their web application or building intranet services.</p>

<p>This addition means you will be able to do the following:</p>

<pre># In settings.py
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': 'data.db',
        'USER': '',
        'PASSWORD': '',
        'HOST': '',
        'PORT': '',
    },
    'production': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'multidb_demo_production',
        'USER': 'root',
        'PASSWORD': '',
        'HOST': '',
        'PORT': '',
    }
}</pre>




<pre>&gt;&gt;&gt; from blog.models import Entry
&gt;&gt;&gt; Entry.objects.all()
[]
&gt;&gt;&gt; Entry.objects.using('default').all()
[]
&gt;&gt;&gt; Entry.objects.using('production').all()
[, ]
&gt;&gt;&gt; e = Entry.objects.using('production')[0]
&gt;&gt;&gt; e._state.__dict__
{'db': 'production'}
&gt;&gt;&gt; e.save(using = 'default') # WARNING: Over-writes SQLite item with same pk
&gt;&gt;&gt; e</pre>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Piracy, Early Adoption, and Eventual Sale]]></title>
    <link href="http://johntron.github.com/economics/eventual-sale/"/>
    <updated>2009-12-07T00:00:00-06:00</updated>
    <id>http://johntron.github.com/economics/eventual-sale</id>
    <content type="html"><![CDATA[<p style="margin-top: 5px;">
  After reading <a href="http://www.boingboing.net/2009/12/06/study-people-who-buy.html">Boing Boing’s report on counterfeit bags</a>, I realized Professor Gosline may be stumbling onto something with huge implications.
</p>


<p><span style="font-size: 18px; line-height: 125%; font-family: Verdana, Geneva, sans-serif;">I think about piracy – a lot. I feel most people are honest and are willing to pay for good products. I don’t think this is necessarily a bad thing for business.</span></p>

<p>Early adoption is the key to market share. Some wise person (Will Shipley?) said you should give your software away to 90% of your users, and then sell it to the other 10% <img src="http://johntron.github.com/wp-content/uploads/2009/12/arrow.png" alt="arrow" title="arrow" width="46" style="left:-20px; position:relative; top:4px; vertical-align:top;" /></p>

<div style="float:left; font-weight:bold; margin: 0 171px -30px 20px; position:relative; text-align:justify; top:-48px; font-family: Verdana;">
  Gain market share, then sell it to the largest market possible. In the product life cycle, the trend starts with early adopters. I think this applies to and individual’s experience with a product as well.
</div>


<p>People who cannot afford to comfortably buy a product are probably not going to buy it. They’re going to pirate it. Thus the company unknowingly and unwillingly gives the user something for free. The user is probably not going to feel good about this, so later on, when things improve for them financially, they’ll probably end up purchasing the real deal.</p>

<p>Possibly the worst thing you can do is sue your users, but you also don’t want to publicly approve of this strategy, because. Then you eliminate the guilt that leads to reciprocity. <em>Pirates are very strong potential customers, and it’s cheaper, more practical, and possibly more profitable to</em> NOT <em>sue them and hope for a sale later.</em></p>

<p><a href="http://www.adobe.com/products/"><img alt="Adobe Photoshop" src="http://www.adobe.com/images/shared/product_mnemonics/48x45/photoshop_cs4_48x45.gif" title="Adobe Photoshop" style="float:left; margin-right:12px;" width="48" height="45" /></a>Adobe’s products are a good example. Most students cannot afford them (even with a massive student discount), so they pirate the software instead (possibly for years). Most people I know have a good experience with Adobe’s products, economic issues aside. They know it’s great software, and they’ll eventually want to return the favor.</p>

<p>So if you have a good product that adds real value to peoples’ lives, quit worrying about pirates. They’ll come around.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interactively debug Django applications]]></title>
    <link href="http://johntron.github.com/programming/interactively-debug-django-applications/"/>
    <updated>2009-11-21T00:00:00-06:00</updated>
    <id>http://johntron.github.com/programming/interactively-debug-django-applications</id>
    <content type="html"><![CDATA[<p>Quit banging your head and learn to debug your Python web application using an interactive stack trace. If you use Apache with mod_wsgi to host a Python application, it is possible to use the Python Debugger (pdb) to trace your code through the console. I use this three-step method to debug my Django projects. I thought about using the <a href="http://rob.cogit8.org/blog/2008/Sep/19/introducing-django-debug-toolbar/">Django Debug Toolbar</a>, but this can only be used in HTML responses. For instance, JSON, XML, or Plaintext responses cannot be debugged with the toolbar.</p>

<h2>Step one: Wrap your WSGI application in a Debugger class</h2>

<p>Edit your WSGI script (specified in your Apache configuration file) to wrap your WSGI application in a Debugger class.<br/>
[python]import os<br/>
import sys</p>

<p>sys.path.append( ‘/www/yourproject’ )<br/>
os.environ[&#8216;DJANGO_SETTINGS_MODULE&#8217;] = ‘settings’<br/>
import django.core.handlers.wsgi<br/>
import settings</p>

<p>if settings.INTERACTIVE_DEBUG:<br/>
class Debugger:</p>

<p>def __init__(self, object):<br/>
self.__object = object</p>

<p>def __call__(self, *args, **kwargs):<br/>
import pdb, sys<br/>
debugger = pdb.Pdb()<br/>
debugger.use_rawinput = 0<br/>
debugger.reset()<br/>
sys.settrace(debugger.trace_dispatch)</p>

<p>try:<br/>
return self.__object(*args, **kwargs)<br/>
finally:<br/>
debugger.quitting = 1<br/>
sys.settrace(None)</p>

<p>application = Debugger( django.core.handlers.wsgi.WSGIHandler() )<br/>
else:<br/>
application = django.core.handlers.wsgi.WSGIHandler()[/python]<br/>
See <a href="http://code.google.com/p/modwsgi/wiki/DebuggingTechniques">modwsgi Debugging Techniques</a> (and scroll down quite a bit) for more information.</p>

<h2>Step two: Add INTERACTIVE_DEBUG to settings</h2>

<p>In your settings.py file, add the following just below <em>DEBUG = True</em>:<br/>
<code>INTERACTIVE_DEBUG = True</code></p>

<h2>Step two: Restart Apache in interactive mode</h2>

<p>In your console (as root) type the following:</p>

<p>[bash]apache2ctl stop<br/>
apache2ctl -X<br/>
[/bash]</p>

<p>This should appear to hang. It’s actually just waiting for you to load a page. Move on.</p>

<h2>Step three: Request a webpage</h2>

<p>Now, just request a webpage from your server like normal and notice your browser hanging now as well. This is because the Python Debugger (pdb) is waiting for input from you. If you switch back to your console, you should see a pdb prompt. From this point on, you can issue pdb commands in the interactive pdb prompt like you would for any Python application. See <a href="http://docs.python.org/library/pdb.html#debugger-commands">pdb commands</a> for more info.</p>

<p>Here’s a list of the most common commands:</p>

<ul>
<li><strong>b myproject/app/file.py:23</strong> – Set breakpoint on line 23 of myproject/app/file.py (should be in your python path)</li>
<li><strong>c</strong> – Continue and stop at any breakpoints you’ve set</li>
<li><strong>w</strong> – Show backtrace to current position</li>
<li><strong>l</strong> – List sourcecode in current file</li>
<li><strong>s</strong> – Continue and stop at next possible occasion</li>
<li><strong>n</strong> – Continue and stop at next line of current function or when function returns</li>
<li><strong>print var</strong> – Print’s python variable <em>var</em></li>
</ul>


<p>In addition to these commands, you can also run any Python code as long as they don’t conflict with these commands.</p>

<p>If this helps, be sure to leave a comment. Thanks!</p>

<p><strong>Updated 23 Nov 2010: </strong>Added INTERACTIVE_DEBUG feature.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[URL Scrubber]]></title>
    <link href="http://johntron.github.com/utilities/url-scrubber/"/>
    <updated>2009-10-27T00:00:00-05:00</updated>
    <id>http://johntron.github.com/utilities/url-scrubber</id>
    <content type="html"><![CDATA[<p>I created a simple script to remove extraneous information from URLs. Check out the <a href="http://johntron.github.com/url_scrubber/">URL Scrubber</a>. No guarantee.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pirate Bay workaround]]></title>
    <link href="http://johntron.github.com/advice/pirate-bay-workaround/"/>
    <updated>2009-09-20T00:00:00-05:00</updated>
    <id>http://johntron.github.com/advice/pirate-bay-workaround</id>
    <content type="html"><![CDATA[<p>Here’s a fix for the Pirate Bay torrents. The primary tracker over at <a href="http://thepiratebay.org/">The Pirate Bay</a> doesn’t seem to be working. As a workaround, I’ve create a simple script to replace torrent files downloaded form TPB to work with one of their secondary trackers (tracker.openbittorrent.com).</p>

<p>To use the script, just upload the torrent you got from TPB, hit submit, and it’ll prompt you to save the converted file. The source code of the script can be found <a href="http://johntron.github.com/tpb-fix.txt">here</a> for the paranoid types.</p>

<p>Enough already, take me to the <a href="http://johntron.github.com/tpb-fix.php">Pirate Bay torrent fixer</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blog guidelines]]></title>
    <link href="http://johntron.github.com/advice/blog-guidelines/"/>
    <updated>2009-07-02T00:00:00-05:00</updated>
    <id>http://johntron.github.com/advice/blog-guidelines</id>
    <content type="html"><![CDATA[<p>I like to think of myself as a “poweruser”. One of the things I do is aggregate RSS feeds from all over, and read them in Google Reader on my Macbook, and in Feeds on my iPhone. After doing this for some time now, I’ve realized there are a few issues that really tick me off when reading (or choosing not to read) some blogs. Below I’ve outlined some of these issues.</p>

<h3>Publish an RSS feed</h3>

<p>If you provide updates regularly, and anyone cares about them, publish an RSS feed. There’s no excuse for not publishing one. With WordPress and the abundance of opensource scripts, there’s no reason you shouldn’t publish one.</p>

<h3>Use descriptive titles</h3>

<p>Users do not want to have to go to your site to see what an article is about, that’s why they’re using RSS. Don’t piss off your users just to get them to come to your site.</h3></p>

<h3>Publish summaries for every feed item, even videos and pictures</h3>

<p>This follows the same reasoning as using descriptive titles. Users might not want to or be able to look at pictures or videos directly from their RSS reader. Provide a concise description so users can decide whether or not they want to view the article; otherwise, they’ll probably default to not viewing it.</p>

<h3>Link directly to the feed item, not the homepage</h3>

<p>Probably one of the most frustrating things is click into an article, and being sent to the feed’s homepage. The user is then forced to hunt down the article, or, more likely, not read it. Always always always, link directly to the article, and not to the homepage, a category page, or any other page. Also, link directly to the <em>full</em> article, not a summary, or a slimmed down one.</p>

<h3>Publish videos in the most common format or multiple formats</h3>

<p>There are no video formats that are supported on every single device on the market, but there are some pretty popular ones. I recommend publishing videos to Youtube, and also offering a version in H.264 MP4. Always publish audio using the MP3 format.</p>

<p>Here are the video specifications for the iphone:</p>

<blockquote><p>Video formats supported: H.264 video, up to 1.5 Mbps, 640 by 480 pixels, 30 frames per second, Low-Complexity version of the H.264 Baseline Profile with AAC-LC audio up to 160 Kbps, 48kHz, stereo audio in .m4v, .mp4, and .mov file formats; H.264 video, up to 2.5 Mbps, 640 by 480 pixels, 30 frames per second, Baseline Profile up to Level 3.0 with AAC-LC audio up to 160 Kbps, 48kHz, stereo audio in .m4v, .mp4, and .mov file formats; MPEG-4 video, up to 2.5 Mbps, 640 by 480 pixels, 30 frames per second, Simple Profile with AAC-LC audio up to 160 Kbps, 48kHz, stereo audio in .m4v, .mp4, and .mov file formats</p></blockquote>

<p>And here’s the video specifications for the Blackberry Tour (newest Blackberry at time of writing):</p>

<blockquote><p>Video format support: MPEG4 H.263, MPEG4 Part 2 Simple Profile, H.264 (encoding and decoding 30fps), WMV</p></blockquote>

<h3>Show the date</h3>

<p>Nobody likes reading an article, then realizing it’s years old. Always publish the date in your RSS feed and on your HTML pages. On your HTML pages, place the date somewhere between the title and the content. This way, a reader knows what they’re getting themselves into before they start reading.</p>

<h3>Use RSS autodiscovery and provide obvious links just in case</h3>

<p>Provide an RSS autodiscovery link to help users aggregate your feed. If you do this, most modern software can figure out the full RSS URL on it’s own.</p>

<p>Here’s what mine looks like:</p>

<blockquote><p><link rel="alternate" type="application/rss+xml" title="Johntron Speaks RSS Feed" href="http://www.johntron.com/feed/" /></p></blockquote>

<p>Anywho, I hope this helps someone. As always, please leave comments, suggestions, corrections, etc.</p>
]]></content>
  </entry>
  
</feed>
