<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Johntron.com]]></title>
  <link href="http://johntron.github.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://johntron.github.com/"/>
  <updated>2013-01-31T08:10:55-06:00</updated>
  <id>http://johntron.github.com/</id>
  <author>
    <name><![CDATA[John Syrinek]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Better logging with Loggly and Symfony 2]]></title>
    <link href="http://johntron.github.com/programming/better-logging-with-loggly-and-symfony-2/"/>
    <updated>2012-07-02T00:00:00-05:00</updated>
    <id>http://johntron.github.com/programming/better-logging-with-loggly-and-symfony-2</id>
    <content type="html"><![CDATA[<p>If you’re using the <a href="https://github.com/beberlei/WhitewashingLogglyBundle" target="_blank">WhitewashingLogglyBundle</a> to send your Symfony 2 project’s log messages to <a href="http://loggly.com/" target="_blank">Loggly</a>, you’re probably wishing the messages on Loggly were a little more informative. Just add this to your services.yml:<br/>
[yaml] monolog.processor.introspection:<br/>
class: Monolog\Processor\IntrospectionProcessor<br/>
tags:<br/>
– { name: monolog.processor }</p>

<p>monolog.processor.web:<br/>
class: Monolog\Processor\WebProcessor<br/>
tags:<br/>
– { name: monolog.processor }[/yaml]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[k-cluster algorithm in PHP]]></title>
    <link href="http://johntron.github.com/programming/k-cluster-algorithm-in-php/"/>
    <updated>2011-07-11T00:00:00-05:00</updated>
    <id>http://johntron.github.com/programming/k-cluster-algorithm-in-php</id>
    <content type="html"><![CDATA[<p>I couldn’t find any k-cluster algorithms in PHP, so I wrote my own for demonstration purposes. It’s not very efficient, but should<br/>
help learn.</p>

<!--more-->


<p>[php]#!/usr/bin/php<br/>
&lt;?php</p></p>

<p>$DATA_POINT_COUNT = 100;<br/>
$NUM_CLUSTERS = 5;</p>

<p>function pick_centroids($data, $num) {<br/>
$centroids = array();<br/>
for ( $i = 0; $i &lt; $num; $i++) { $centroids[] = mt_rand( 0, count($data) - 1 ); } return $centroids; } function generate_centroids( $centroids ) { // Centroids are just the average value of each centroid foreach( $centroids as $i =--> $centroid ) {<br/>
$centroids[ $i ] = array_sum( $centroid ) / count( $centroid );<br/>
}<br/>
return $centroids;<br/>
}</p>

<p>function generate_clusters( $data, $centroids ) {<br/>
// iterate through datapoints and associate each datapoint with the closest centroid</p>

<p>$max = max( $data ); // Maximum possible distance<br/>
$clusters = array(); // Output<br/>
foreach( $data as $datum ) {<br/>
$closest_dist = $max;<br/>
$index_of_closest = 0;<br/>
foreach( $centroids as $centroid ) {<br/>
$dist = abs( $centroid – $datum );<br/>
//print ‘dist between ‘ . $datum . ‘ and ‘ . $centroid . ‘ is ‘ . $dist . PHP_EOL;<br/>
if ( $dist &lt; $closest_dist ) {<br/>
// Datapoint was closer to this centroid than the last</p>

<p>$closest_dist = $dist;<br/>
$index_of_closest = $centroid; // Use centroid value as index to avoid duplicates<br/>
}<br/>
}<br/>
//print ‘index of closest is ‘ . $index_of_closest . PHP_EOL;<br/>
if ( !isset( $clusters[$index_of_closest] ) ) $clusters[$index_of_closest] = array(); // Avoid undefined-offset notices<br/>
array_push( $clusters[$index_of_closest], $datum ); // Store datapoint at index of centroid it’s closest to<br/>
}<br/>
return $clusters;<br/>
}</p>

<p>// Generate datapoints<br/>
$data = array();<br/>
for( $i = 0; $i &lt; $DATA_POINT_COUNT; $i++ ) {<br/>
$data[] = mt_rand(0,$i);<br/>
}<br/>
sort( $data ); // Sort to be neat<br/>
print_r( $data );</p>

<p>// Generate initial centroids randomly<br/>
$centroids = pick_centroids( $data, $NUM_CLUSTERS );</p>

<p>// Generate new clusters and compare to old ones until there’s no change<br/>
$old_clusters = 0; // Seed values<br/>
$clusters = !$old_clusters; //<br/>
while( $clusters !== $old_clusters ) {<br/>
// Save old clusters<br/>
$old_clusters = $clusters;</p>

<p>// Generate new ones<br/>
$clusters = generate_clusters( $data, $centroids );</p>

<p>// Create new centroids<br/>
$centroids = generate_centroids( $clusters );<br/>
}</p>

<p>echo ‘Clustering complete’ . PHP_EOL;<br/>
foreach( $clusters as $cluster ) {<br/>
echo ‘cluster: ‘ . implode( ‘, ‘, $cluster ) . PHP_EOL;<br/>
}[/php]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Evaluating Third-party Software]]></title>
    <link href="http://johntron.github.com/programming/evaluating-third-party-software/"/>
    <updated>2010-11-08T00:00:00-06:00</updated>
    <id>http://johntron.github.com/programming/evaluating-third-party-software</id>
    <content type="html"><![CDATA[<!--:en-->


<p>I recently ran across a great overview of the strengths of Django:</p>

<p><a title="The Rise of Python and Django on the Web" href="http://jltfox.posterous.com/the-rise-of-python-and-django-on-the-web" target="_blank">The Rise of Python and Django on the Web</a>. Great job jltfox!</p>

<p>When evaluating any third-party software, here are the criteria I use:</p>

<ul>
<li>Documentation – If a framework wants to be the core of my code, I have to be able to understand every aspect</li>
<li>Simplicity – Documentation can only go so far. The framework has to be simple so it’s intuitive. I don’t want to have to refer to documentation for everything. Also, integrating my own code or third-party code has to be effortless, and simplicity makes this more likely</li>
<li>Clarity – This is related to simplicity and documentation. A good framework has pick programming methodology, communicate this, and stick to it. Function definitions and naming conventions should be consistent.</li>
<li>Modularity – A framework is rarely and end-all solution. I have never worked on a project with a framework and no other third-party software. A good framework plays well with others.</li>
<li>Community – Frameworks come and go, so a good community is key. I want to know support and development will continue for years to come. Also, I don’t want to have to pay someone just because they know something no one else does.</li>
<li>Openness – Nobody can predict how people will use their software, so it’s crucial for developers to be able to dig around in the code of a framework. This means open source, simplicity, and great documentation from the top down.</li>
</ul>


<p>With these criteria in mind, here’s my opinions on various software:</p>

<ul>
<li>Django does a great job at all of these.</li>
<li>Zend Framework is pretty good as well.</li>
<li>jQuery is a great Javascript framework.</li>
<li>Yahoo’s YUI used to try to do too much, but this may have improved.</li>
<li>WordPress is pretty good, but their documentation could be organized better.</li>
<li>Drupal is all over the place, but I’m optimistic about the upcoming version 7.</li>
<li>Ubuntu is a top notch linux distribution that benefits from a massive community.</li>
<li>FreeBSD is very secure and performs very well, but their package management system and documentation could use some improvement.</li>
</ul>


<p>Over the years, I’ve notice that the predominant players have a few years of buildup before reaching critical mass. Once they reach this point, everyone jumps onboard, and this support helps round out the project – performance improvements, scalability, modularity, documentation, etc. I feel like Zend Framework, WordPress, Ubuntu, and jQuery have reached these points already, while the others are still on track. Some, like YUI and FreeBSD seem to be falling behind. HTML5 and CSS3 could change things for jQuery.<!--:--></p>

<!--:es-->


<p>I recently ran across a great overview of the strengths of Django:</p>

<p><a title="The Rise of Python and Django on the Web" href="http://jltfox.posterous.com/the-rise-of-python-and-django-on-the-web" target="_blank">The Rise of Python and Django on the Web</a>. Great job jltfox!</p>

<p>When evaluating any third-party software, here are the criteria I use:</p>

<ul>
<li>Documentation – If a framework wants to be the core of my code, I have to be able to understand every aspect</li>
<li>Simplicity – Documentation can only go so far. The framework has to be simple so it’s intuitive. I don’t want to have to refer to documentation for everything. Also, integrating my own code or third-party code has to be effortless, and simplicity makes this more likely</li>
<li>Clarity – This is related to simplicity and documentation. A good framework has pick programming methodology, communicate this, and stick to it. Function definitions and naming conventions should be consistent.</li>
<li>Modularity – A framework is rarely and end-all solution. I have never worked on a project with a framework and no other third-party software. A good framework plays well with others.</li>
<li>Community – Frameworks come and go, so a good community is key. I want to know support and development will continue for years to come. Also, I don’t want to have to pay someone just because they know something no one else does.</li>
<li>Openness – Nobody can predict how people will use their software, so it’s crucial for developers to be able to dig around in the code of a framework. This means open source, simplicity, and great documentation from the top down.</li>
</ul>


<p>With these criteria in mind, here’s my opinions on various software:</p>

<ul>
<li>Django does a great job at all of these.</li>
<li>Zend Framework is pretty good as well.</li>
<li>jQuery is a great Javascript framework.</li>
<li>Yahoo’s YUI used to try to do too much, but this may have improved.</li>
<li>WordPress is pretty good, but their documentation could be organized better.</li>
<li>Drupal is all over the place, but I’m optimistic about the upcoming version 7.</li>
<li>Ubuntu is a top notch linux distribution that benefits from a massive community.</li>
<li>FreeBSD is very secure and performs very well, but their package management system and documentation could use some improvement.</li>
</ul>


<p>Over the years, I’ve notice that the predominant players have a few years of buildup before reaching critical mass. Once they reach this point, everyone jumps onboard, and this support helps round out the project – performance improvements, scalability, modularity, documentation, etc. I feel like Zend Framework, WordPress, Ubuntu, and jQuery have reached these points already, while the others are still on track. Some, like YUI and FreeBSD seem to be falling behind. HTML5 and CSS3 could change things for jQuery.<!--:--></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python site-packages]]></title>
    <link href="http://johntron.github.com/programming/python-site-packages/"/>
    <updated>2010-07-18T00:00:00-05:00</updated>
    <id>http://johntron.github.com/programming/python-site-packages</id>
    <content type="html"><![CDATA[<p>To get the path of your Python site-packages, just type the following from the console:</p>

<p>[bash]python -c “from distutils.sysconfig import get_python_lib; print get_python_lib()”[/bash]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multiple Databases in Django 1.2]]></title>
    <link href="http://johntron.github.com/programming/multiple-databases-in-django/"/>
    <updated>2009-12-16T00:00:00-06:00</updated>
    <id>http://johntron.github.com/programming/multiple-databases-in-django</id>
    <content type="html"><![CDATA[<p><img class="size-full wp-image-478 alignright" title="Multi-database Django" src="http://www.johntron.com/wp-content/uploads/2009/12/multi-db-django.png" alt="Multi-database Django" width="144" height="80" /></p>

<p>Django 1.2 will contain support for multiple databases, according to <a href="http://simonwillison.net/static/2009/djugl-december.html">Simon Willison</a> (<a href="http://twitter.com/simonw/">@simonw</a>). Good news for people trying to scale their web application or building intranet services.</p>

<p>This addition means you will be able to do the following:</p>

<pre># In settings.py
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': 'data.db',
        'USER': '',
        'PASSWORD': '',
        'HOST': '',
        'PORT': '',
    },
    'production': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'multidb_demo_production',
        'USER': 'root',
        'PASSWORD': '',
        'HOST': '',
        'PORT': '',
    }
}</pre>




<pre>&gt;&gt;&gt; from blog.models import Entry
&gt;&gt;&gt; Entry.objects.all()
[]
&gt;&gt;&gt; Entry.objects.using('default').all()
[]
&gt;&gt;&gt; Entry.objects.using('production').all()
[, ]
&gt;&gt;&gt; e = Entry.objects.using('production')[0]
&gt;&gt;&gt; e._state.__dict__
{'db': 'production'}
&gt;&gt;&gt; e.save(using = 'default') # WARNING: Over-writes SQLite item with same pk
&gt;&gt;&gt; e</pre>



]]></content>
  </entry>
  
</feed>
